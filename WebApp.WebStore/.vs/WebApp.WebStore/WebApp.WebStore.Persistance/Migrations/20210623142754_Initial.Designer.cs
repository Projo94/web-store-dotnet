// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.WebStore.Persistance;

namespace WebApp.WebStore.Persistance.Migrations
{
    [DbContext(typeof(WebStoreDbContext))]
    [Migration("20210623142754_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.BrandType", b =>
                {
                    b.Property<int>("BrandTypeEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BrandTypeEID");

                    b.ToTable("BrandTypes");

                    b.HasData(
                        new
                        {
                            BrandTypeEID = 1,
                            Caption = "Puma"
                        },
                        new
                        {
                            BrandTypeEID = 2,
                            Caption = "Nike"
                        },
                        new
                        {
                            BrandTypeEID = 3,
                            Caption = "Adidas"
                        });
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Caption = "Shoes"
                        },
                        new
                        {
                            CategoryID = 2,
                            Caption = "Clothes"
                        },
                        new
                        {
                            CategoryID = 3,
                            Caption = "Jackets"
                        },
                        new
                        {
                            CategoryID = 4,
                            Caption = "Shirts"
                        },
                        new
                        {
                            CategoryID = 5,
                            Caption = "Sneakers"
                        });
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreateDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Uid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderItemID");

                    b.HasIndex("ProductID");

                    b.HasIndex("Uid");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Picture", b =>
                {
                    b.Property<int>("PictureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PictureDisplay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PictureID");

                    b.HasIndex("ProductID");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("BrandTypeEID")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Uid");

                    b.HasIndex("BrandTypeEID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProductsCategories");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.ProductSizeType", b =>
                {
                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeTypeID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "SizeTypeID");

                    b.HasIndex("SizeTypeID");

                    b.ToTable("ProductsSizeTypes");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.SizeType", b =>
                {
                    b.Property<int>("SizeTypeEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SizeTypeEID");

                    b.ToTable("SizeTypes");

                    b.HasData(
                        new
                        {
                            SizeTypeEID = 1,
                            Caption = "S"
                        },
                        new
                        {
                            SizeTypeEID = 2,
                            Caption = "L"
                        },
                        new
                        {
                            SizeTypeEID = 3,
                            Caption = "XL"
                        },
                        new
                        {
                            SizeTypeEID = 4,
                            Caption = "XXL"
                        },
                        new
                        {
                            SizeTypeEID = 5,
                            Caption = "XXXL"
                        });
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("WebApp.WebStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.WebStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Picture", b =>
                {
                    b.HasOne("WebApp.WebStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Product", b =>
                {
                    b.HasOne("WebApp.WebStore.Domain.Entities.BrandType", "BrandType")
                        .WithMany()
                        .HasForeignKey("BrandTypeEID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandType");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("WebApp.WebStore.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategory")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.WebStore.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategory")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.ProductSizeType", b =>
                {
                    b.HasOne("WebApp.WebStore.Domain.Entities.Product", "Product")
                        .WithMany("ProductSizeType")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.WebStore.Domain.Entities.SizeType", "SizeType")
                        .WithMany("ProductSizeType")
                        .HasForeignKey("SizeTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SizeType");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCategory");

                    b.Navigation("ProductSizeType");
                });

            modelBuilder.Entity("WebApp.WebStore.Domain.Entities.SizeType", b =>
                {
                    b.Navigation("ProductSizeType");
                });
#pragma warning restore 612, 618
        }
    }
}
